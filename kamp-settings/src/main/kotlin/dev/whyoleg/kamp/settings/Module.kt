package dev.whyoleg.kamp.settings

sealed class Dir(
    val clsName: String,
    var ignore: Boolean,
    val inner: List<Dir>
) {
    internal abstract fun lines(): List<String>
    internal abstract fun modules(): List<ModuleWithPath>
}

class Module(
    val name: String,
    clsName: String = name.dashToCamel(),
    ignore: Boolean = false,
    inner: List<Dir> = emptyList()
) : Dir(clsName, ignore, inner) {
    @OptIn(ExperimentalStdlibApi::class)
    override fun lines(): List<String> = buildList {
        add("""val ${clsName.decapitalize()} = KampModule(":$name")""")
        if (inner.isEmpty()) return@buildList
        add("")
        add("object ${clsName.capitalize()} {")
        inner.flatMap(Dir::lines).forEach {
            add("    $it")
        }
        add("}")
    }

    @OptIn(ExperimentalStdlibApi::class)
    override fun modules(): List<ModuleWithPath> = if (ignore) emptyList() else buildList {
        add(ModuleWithPath(name, name))
        inner.forEach { dir ->
            dir.modules().forEach {
                it.copy(name = "$name:${it.name}")
            }
        }
    }
}

class Folder(
    val path: String,
    clsName: String = path.substringAfterLast('\\').dashToCamel(),
    ignore: Boolean = false,
    inner: List<Dir> = emptyList()
) : Dir(clsName, ignore, inner) {
    @OptIn(ExperimentalStdlibApi::class)
    override fun lines(): List<String> = if (inner.isEmpty()) emptyList() else buildList {
        add("")
        add("object ${clsName.capitalize()} {")
        inner.flatMap(Dir::lines).forEach {
            add("    $it")
        }
        add("}")
    }

    override fun modules(): List<ModuleWithPath> = if (ignore) emptyList() else inner.flatMap(Dir::modules).map {
        it.copy(path = "$path/${it.path}")
    }
}

class Root(
    clsName: String = "ProjectModules",
    inner: List<Dir> = emptyList()
) : Dir(clsName, false, inner) {
    @OptIn(ExperimentalStdlibApi::class)
    override fun lines(): List<String> = buildList {
        add("import dev.whyoleg.kamp.dependency.*")
        add("")
        add("/**Autogenerated with kamp, don't change**/")
        add("object $clsName {")
        inner.flatMap(Dir::lines).forEach {
            add("    $it")
        }
        add("}")
    }

    override fun modules(): List<ModuleWithPath> = inner.flatMap(Dir::modules).distinct()
}

public fun String.dashToCamel(): String = buildString {
    var dash = false
    for (c in this@dashToCamel) {
        dash = if (c == '-') {
            true
        } else {
            append(if (dash) c.toUpperCase() else c)
            false
        }
    }
}

internal data class ModuleWithPath(val name: String, val path: String)
