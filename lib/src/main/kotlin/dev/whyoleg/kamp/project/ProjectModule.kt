package dev.whyoleg.kamp.project

import dev.whyoleg.kamp.dependency.*

typealias ProjectModule = KampProjectDependency

@PublishedApi
internal data class ModuleResolveResult(val modules: List<ModuleWithPath>, val cls: String)

@PublishedApi
internal data class ModuleWithPath(val name: String, val path: String?)

@PublishedApi
internal fun ModuleResolveResult(builder: ModuleBuilder): ModuleResolveResult = ModuleResolveResult(
    builder.modules(),
    (listOf("import dev.whyoleg.kamp.project.*", "", "//Autogenerated with kamp, don't change") + builder.classes() + "").joinToString("\n")
)

data class ModuleBuilder
@PublishedApi
internal constructor(
    private val kotlinName: String,
    @PublishedApi
    internal val gradleName: String,
    @PublishedApi
    internal val path: String?,
    private val ignore: Boolean,
    @PublishedApi
    internal val nested: MutableList<ModuleBuilder> = mutableListOf()
) {

    public fun String.toDashLowerCase(): String = mapIndexed { index: Int, c: Char ->
        val lower = c.toLowerCase()
        when (index != 0 && c.isUpperCase()) {
            true  -> "-$lower"
            false -> lower
        }
    }.joinToString("")

    inline operator fun String.invoke(
        gradleName: String = toDashLowerCase(),
        path: String? = null,
        ignore: Boolean = false,
        block: ModuleBuilder.() -> Unit = {}
    ) {
        val rootGradleName = this@ModuleBuilder.gradleName
        val rootPath = this@ModuleBuilder.path
        val moduleName = if (rootGradleName.isBlank()) ":$gradleName" else "$rootGradleName:$gradleName"
        val pathModified = if (rootPath != null) "$rootPath/$path" else path
        nested += ModuleBuilder(this, moduleName, pathModified, ignore).apply(block)
    }

    internal fun modules(): List<ModuleWithPath> {
        val current = if (gradleName.isBlank()) emptyList() else listOf(ModuleWithPath(gradleName, path))
        val nested = nested.filterNot(ModuleBuilder::ignore).flatMap(ModuleBuilder::modules)
        return current + nested
    }

    internal fun classes(): List<String> = when {
        nested.isNotEmpty() -> when (kotlinName.isBlank()) {
            true  -> listOf("object ProjectModules {") + nested.sortedBy { it.nested.size }.classes() + "}"
            false -> listOf("", "object ${kotlinName.capitalize()} {") + nested.sortedBy { it.nested.size }.classes() + "}"
        }
        else                -> listOf("val ${kotlinName.decapitalize()} = ProjectModule(\"$gradleName\")")
    }

    private fun List<ModuleBuilder>.classes(): List<String> = flatMap(ModuleBuilder::classes).map { if (it.isBlank()) it else "    $it" }

}

@PublishedApi
internal inline fun resolveModules(block: ModuleBuilder.() -> Unit): ModuleResolveResult =
    ModuleResolveResult(ModuleBuilder("", "", null, false).apply(block))
